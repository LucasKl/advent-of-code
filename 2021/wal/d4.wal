(load "res/d4.vcd" t)

(set [all-numbers '(31 88 35 24 46 48 95 42 18 43 71 32 92 62 97 63 50 2 60 58 74 66 15 87 57 34 14 3 54 93 75 22 45 10 56 12 83 30 8 76 1 78 82 39 98 37 19 26 81 64 55 41 16 4 72 5 52 80 84 67 21 86 23 91 0 68 36 13 44 20 69 40 90 96 27 77 38 49 94 47 9 65 28 59 79 6 29 61 53 11 17 73 99 25 89 51 7 33 85 70)])

(defun all [data] (! (in #f data)))
(defun any [data] (in #t data))

(defun get-row [r]
  (set [r (- r 1)])
  (list d1@r d2@r d3@r d4@r d5@r))

(defun get-col [c]
  (list (get c)@0
       	(get c)@1
	(get c)@2
	(get c)@3
	(get c)@4))

(defun sum-board [numbers]
  (set [board (+ (get-row 1) (get-row 2) (get-row 3) (get-row 4) (get-row 5))])
  (sum (map (fn [x [numbers numbers]] (if (in x numbers) 0 x)) board)))

(defun check-until [t]
  (defun test (r c numbers)
    (|| (all (map (fn [x (xs numbers)] (in x xs)) (get-row r)))
        (all (map (fn [x (xs numbers)] (in x xs)) (get-col c)))))
  (set [n all-numbers[0:t]])
  (any (list (test 1 'd1 n)
       	     (test 2 'd2 n)
      	     (test 3 'd3 n)
      	     (test 4 'd4 n)
      	     (test 5 'd5 n))))

(defun check [i]
  (cond
    [(check-until i) (list i (sum-board all-numbers[0:i]) all-numbers[(- i 1)])]
    [(>= i (length all-numbers)) #f]
    [#t (check (+ i 1))]))

(defun find-board [best-round best-score worst-round worst-score]
  (set [data (check 0)]
       [round data[0]]
       [score (* data[1] data[2])]
       [best-score (if (< round best-round) score best-score)]
       [best-round (if (< round best-round) round best-round)]
       [worst-score (if (> round worst-round) score worst-score)]
       [worst-round (if (> round worst-round) round worst-round)])
  (if (step 5)
      (find-board best-round best-score worst-round worst-score)
      (list best-score worst-score)))

(set [solutions (find-board (length all-numbers) 0 0 0)])
(print "D4-1: " solutions[0])
(print "D4-2: " solutions[1])
